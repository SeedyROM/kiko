#!/bin/bash

# Print usage information
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Start Kiko development or release servers.

Options:
  -r, --release                      Start in release mode (optimized builds)
  -be, --backend-address=ADDRESS     Set backend server address 
                                     (default: http://localhost:3030)
  -fe, --frontend-address=ADDRESS    Set frontend server address
                                     (default: http://localhost:8080)
  -h, --help                         Show this help message

Examples:
  $0                                    Start in development mode
  $0 --release                          Start in release mode
  $0 -be=http://0.0.0.0:3030            Start with custom backend address
  $0 --release -fe=http://0.0.0.0:8080  Release mode with custom frontend

EOF
}

# Parse command line arguments
RELEASE_MODE=false
BACKEND_ADDRESS="http://localhost:3030"
FRONTEND_ADDRESS="http://localhost:8080"

while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--release)
            RELEASE_MODE=true
            shift
            ;;
        -be=*|--backend-address=*)
            BACKEND_ADDRESS="${1#*=}"
            shift
            ;;
        -be|--backend-address)
            BACKEND_ADDRESS="$2"
            shift 2
            ;;
        -fe=*|--frontend-address=*)
            FRONTEND_ADDRESS="${1#*=}"
            shift
            ;;
        -fe|--frontend-address)
            FRONTEND_ADDRESS="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Error: Unknown argument '$1'"
            echo
            usage
            exit 1
            ;;
    esac
done

# Kill background processes on script exit
trap 'kill $(jobs -p) 2>/dev/null' EXIT
trap 'kill $(jobs -p) 2>/dev/null' INT
trap 'kill $(jobs -p) 2>/dev/null' TERM

# ANSI color codes
CLIENT_COLOR='\033[38;5;117m' # Light blue
SERVER_COLOR='\033[38;5;179m' # Light yellow
LOGO_COLOR='\033[38;5;189m' # Light magenta
NC='\033[0m' # Stop color

# Function to check if backend is ready
check_backend_health() {
    local max_attempts=60
    local attempt=0
    local backend_url="${BACKEND_ADDRESS}"
    
    while [ $attempt -lt $max_attempts ]; do
        # Try to connect to the backend (adjust the endpoint as needed)
        if curl -s -f "$backend_url/health" >/dev/null 2>&1 || \
           curl -s -f "$backend_url" >/dev/null 2>&1 || \
           nc -z localhost 3030 >/dev/null 2>&1; then
            return 0
        fi
        
        attempt=$((attempt + 1))
        sleep 2
    done
    
    echo -e "\n${LOGO_COLOR}❌ Backend failed to start within 120 seconds${NC}"
    return 1
}

# Check if required tools are installed
if ! command -v rustc &> /dev/null; then
    echo "❌ Rust is not installed. Please install Rust to run this script."
    exit 1
fi

if ! command -v trunk &> /dev/null; then
    echo "❌ Trunk is not installed. Please install Trunk to run this script."
    exit 1
fi

if [ "$RELEASE_MODE" = false ] && ! command -v cargo-watch &> /dev/null; then
    echo "❌ Cargo Watch is not installed. Please install Cargo Watch to run this script."
    exit 1
fi

if ! command -v npm &> /dev/null && ! command -v npx &> /dev/null; then
    echo "❌ npm or npx is not installed. Please install Node.js to run this script."
    exit 1
fi

# Check if curl or nc is available for health checks
if ! command -v curl &> /dev/null && ! command -v nc &> /dev/null; then
    echo "⚠️  Warning: Neither curl nor nc found. Backend health check will be basic."
    HEALTH_CHECK_AVAILABLE=false
else
    HEALTH_CHECK_AVAILABLE=true
fi

# Print logo
echo -e "${LOGO_COLOR}"
echo "  ,--. ,--.,--.,--.          "
echo "  |  .'   /\`--'|  |,-. ,---. "
echo "  |  .   ' ,--.|     /| .-. |"
echo "  |  |\   \|  ||  \  \' '-' '"
echo "  \`--' '--'\`--'\`--'\`--'\`---' "
echo -e "${NC}"

echo "   📡 Backend:  ${BACKEND_ADDRESS}"
echo "   🎨 Frontend: ${FRONTEND_ADDRESS}"
echo -e "\nPress Ctrl+C to stop both servers\n"

if [ "$RELEASE_MODE" = true ]; then
    echo "🚀 Starting Kiko release servers..."
    
    # Start backend in release mode
    echo "📡 Starting backend server (release)..."
    cd crates/kiko-backend
    cargo run --release 2>&1 | awk -v prefix="${SERVER_COLOR}[server]${NC}" '{print prefix " " $0; fflush()}' &
    BACKEND_PID=$!
else
    echo "🚀 Starting Kiko development servers..."
    
    # Start backend with watch mode
    echo "📡 Starting backend server (dev watch)..."
    cd crates/kiko-backend
    cargo watch -w src -x run 2>&1 | awk -v prefix="${SERVER_COLOR}[server]${NC}" '{print prefix " " $0; fflush()}' &
    BACKEND_PID=$!
fi

# Wait for backend to be ready
if [ "$HEALTH_CHECK_AVAILABLE" = true ]; then
    if ! check_backend_health; then
        echo "❌ Failed to start backend. Exiting..."
        exit 1
    fi
else
    # Fallback to simple sleep if health check tools aren't available
    echo -e "${LOGO_COLOR}⏳ Waiting 5 seconds for backend to start...${NC}"
    sleep 5
fi

# Start frontend
if [ "$RELEASE_MODE" = true ]; then
    echo "🎨 Starting frontend server (release)..."
    cd ../kiko-frontend
    trunk serve --release 2>&1 | awk -v prefix="${CLIENT_COLOR}[client]${NC}" '{print prefix " " $0; fflush()}' &
    FRONTEND_PID=$!
else
    echo "🎨 Starting frontend server (dev)..."
    cd ../kiko-frontend
    trunk serve 2>&1 | awk -v prefix="${CLIENT_COLOR}[client]${NC}" '{print prefix " " $0; fflush()}' &
    FRONTEND_PID=$!
fi

# Wait for user interrupt
wait